const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const CircularDependencyPlugin = require('circular-dependency-plugin')

module.exports = {
	entry: {
		sandbox: './src/sandbox.js',
	},
	output: {
		path: path.resolve('./build'),
		publicPath: '/',
	},
	resolve: {
		extensions: ['.js', '.ts'],
		symlinks: false,
	},
	devtool: 'eval-source-map', //'cheap-module-eval-source-map'/* 'inline-source-map' */,
	module: {
		// rules: [{
		// 	test: /\.tsx?$/,
		// 	use: {
		// 		loader: 'ts-loader',
		// 		options: {
		// 			transpileOnly: false, // true == FAST build, false == slow, fail on TS errors
		// 			experimentalWatchApi: false, // ???
		// 		},
		// 	},
		// 	exclude: /node_modules|.\.test\./,
		// }]
	},
	optimization: {
		removeAvailableModules: false,
		removeEmptyChunks: false,
		splitChunks: false,
	},
	devServer: {
		port: 3001,
		contentBase: './build',
		historyApiFallback: {
			index: '/sandbox.html'
		}
	},
	plugins: [
		new HtmlWebpackPlugin({
			template: './src/html/template.html',
			filename: 'sandbox.html',
			title: 'sandbox',
			inject: true,
			hash: false,
			assets: {},
		}),
		// new CircularDependencyPlugin({
		// 	// `onStart` is called before the cycle detection starts
		// 	failOnError: false,
		// 	onStart({
		// 		compilation
		// 	}) {
		// 		console.log('start detecting webpack modules cycles');
		// 	},
		// 	// `onDetected` is called for each module that is cyclical
		// 	onDetected({
		// 		module: webpackModuleRecord,
		// 		paths,
		// 		compilation
		// 	}) {
		// 		// `paths` will be an Array of the relative module paths that make up the cycle
		// 		// `module` will be the module record generated by webpack that caused the cycle
		// 		compilation.errors.push(new Error(paths.join(' -> ')))
		// 	},
		// 	// `onEnd` is called before the cycle detection ends
		// 	onEnd({
		// 		compilation
		// 	}) {
		// 		console.log('end detecting webpack modules cycles');
		// 	},
		// })
	]
}
